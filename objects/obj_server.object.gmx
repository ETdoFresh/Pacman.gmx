<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Server

scr_log("Creating Server...");

max_clients = 32;

server = network_create_server(network_socket_tcp, PORT, max_clients);
if (server &lt; 0)
{
    scr_log("Error creating server");
    game_restart();
}
else
{
    scr_log("Server Created");
}

socket_list = ds_list_create();
client_list = ds_map_create();
player_buffer = buffer_create(256, buffer_grow, 1);
last_update = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(server);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Server Send Packets

// Packet Send Speed (in ms)
var packet_speed = 100;
if (current_time - last_update &lt; packet_speed)
    exit;
last_update = current_time;

// Simulate random packet loss 
// if (random(100) &lt; 50) exit;


var socket_count = ds_list_size(socket_list);
if (socket_count &gt; 0)
{    
    var player_total = instance_number(obj_server_target);

    for (i = 0; i &lt; socket_count; i++)
    {    
        var socket = ds_list_find_value(socket_list, i);
        var instance = ds_map_find_value(client_list, socket);
        var player_number = i;
        
        buffer_seek(player_buffer, buffer_seek_start, 1);
        buffer_write(player_buffer, buffer_u8, CMD_UPDATE);
        buffer_write(player_buffer, buffer_u8, player_number);
        buffer_write(player_buffer, buffer_u8, player_total);
        
        with (instance)
            buffer_write(other.player_buffer, buffer_u32, last_cmd_id);
        
        with (obj_server_target)
        {
            buffer_write(other.player_buffer, buffer_u16, x);
            buffer_write(other.player_buffer, buffer_u16, y);
            buffer_write(other.player_buffer, buffer_u32, image_blend);
        }
        
        var buffer_size = buffer_tell(player_buffer);
    
        network_send_packet(socket, player_buffer, buffer_size);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Server Receive Data

var type = ds_map_find_value(async_load, "type");
var eventid = ds_map_find_value(async_load, "id");
var command = -1;

//scr_log("Server Recieved - " + string(eventid) + " " + string(type));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive Disconnect Client

if (server == eventid &amp;&amp; type == network_type_disconnect)
{
    var socket = ds_map_find_value(async_load, "socket");
    var instance = ds_map_find_value(client_list, socket);
    ds_map_delete(client_list, socket);
    var index = ds_list_find_index(socket_list, socket);
    ds_list_delete(socket_list, index);
    with (instance) instance_destroy();
    
    var ip = ds_map_find_value(async_load, "ip");    
    scr_log("(" + string(socket) + ") " + string (ip) + " Disconnected");
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive Connect Client

if (server == eventid &amp;&amp; type == network_type_connect)
{
    var socket = ds_map_find_value(async_load, "socket");
    var instance = instance_create(50, 50, obj_server_target);
    instance.image_blend = make_color_rgb(random(255), random(255), random(255));
    ds_list_add(socket_list, socket);
    ds_map_add(client_list, socket, instance);

    var ip = ds_map_find_value(async_load, "ip");    
    scr_log("(" + string(socket) + ") " + string (ip) + " Connected");
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive Keyboard Command

if (type == network_type_data)
{
    var socket = eventid;
    var buffer = ds_map_find_value(async_load, "buffer");
    command = buffer_read(buffer, buffer_u8);
    
    if (command == CMD_KEYBOARD)
    {
        var instance = ds_map_find_value(client_list, socket);
        instance.last_cmd_id = buffer_read(buffer, buffer_u32);
        
        var key_count = buffer_read(buffer, buffer_u8);
        for (var i = 0; i &lt; key_count; i++)
        {
            var key = buffer_read(buffer, buffer_s16);
            
            if (key == vk_left)
            {
                with (instance)
                    x -= move_speed;
            }
            else if (key == vk_right)
            {
                with (instance)
                    x += move_speed;
            }
            else if (key == vk_up)
            {
                with (instance)
                    y -= move_speed;
            }
            else if (key == vk_down)
            {
                with (instance)
                    y += move_speed;
            }
 
            with (instance)
            {
                if (x &lt; 0)
                    x = 0;
                else if (x &gt; obj_log_panel.x - 32)
                    x = obj_log_panel.x - 32;
                    
                if (y &lt; 0)
                    y = 0;
                else if (y &gt; room_height-32)
                    y = room_height-32;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive Chat Command

if (type == network_type_data &amp;&amp; command == CMD_CHAT)
{
    var chat_text = buffer_read(buffer, buffer_string);
    var player_number = ds_list_find_index(socket_list, socket);
    
    buffer_seek(player_buffer, buffer_seek_start, 1);
    buffer_write(player_buffer, buffer_u8, CMD_CHAT);
    buffer_write(player_buffer, buffer_u8, player_number);
    buffer_write(player_buffer, buffer_string, chat_text);
    var buffer_size = buffer_tell(player_buffer);
    
    for (var i = 0; i &lt; ds_list_size(socket_list); i++)
    {
        var client_socket = ds_list_find_value(socket_list, i);
        network_send_packet(client_socket, player_buffer, buffer_size);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive Latency Command

if (type == network_type_data &amp;&amp; command == CMD_LATENCY)
{
    var sent_time = buffer_read(buffer, buffer_u32);
    
    buffer_seek(player_buffer, buffer_seek_start, 1);
    buffer_write(player_buffer, buffer_u8, CMD_LATENCY);
    buffer_write(player_buffer, buffer_u32, sent_time);
    var buffer_size = buffer_tell(player_buffer);
    network_send_packet(socket, player_buffer, buffer_size);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Label Server Window

draw_set_color(c_red);
draw_set_halign(fa_left);
draw_set_valign(fa_bottom);
draw_text(0, room_height, "SERVER");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
