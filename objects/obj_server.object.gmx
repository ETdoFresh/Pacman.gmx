<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Server

scr_log("Creating Server...");

max_clients = 32;

server = network_create_server(network_socket_tcp, PORT, max_clients);
if (server &lt; 0)
{
    scr_log("Error creating server");
    game_restart();
}
else
{
    scr_log("Server Created");
}

last_update = 0;

entity_id = 0;
entity_list = ds_list_create();
entity_buffer = buffer_create(256, buffer_grow, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy Server

network_destroy(server);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Server Send Packets

// Packet Send Speed (in ms)
var packet_speed = 100;
if (current_time - last_update &lt; packet_speed)
    exit;
last_update = current_time;

// Simulate random packet loss 
// if (random(100) &lt; 50) exit;

var entities = ds_list_size(entity_list);
for (i = 0; i &lt; entities; i++)
{
    var player = ds_list_find_value(entity_list, i);
    if (player.object_index == obj_server_player)
    {    
        buffer_seek(entity_buffer, buffer_seek_start, 1);
        buffer_write(entity_buffer, buffer_u8, CMD_UPDATE);
        buffer_write(entity_buffer, buffer_u16, entities);
        buffer_write(entity_buffer, buffer_u8, player.number);
        buffer_write(entity_buffer, buffer_u32, player.last_cmd_id);

        for (var j = 0; j &lt; entities; j++)
        {
            var entity = ds_list_find_value(entity_list, j);
            
            switch (entity.object_index)
            {
                case obj_server_player:
                    buffer_write(entity_buffer, buffer_u8, TYPE_PLAYER);
                    buffer_write(entity_buffer, buffer_u32, entity.entity_id);
                    buffer_write(entity_buffer, buffer_u8, entity.number);
                    buffer_write(entity_buffer, buffer_u16, entity.x);
                    buffer_write(entity_buffer, buffer_u16, entity.y);
                    buffer_write(entity_buffer, buffer_u32, entity.image_blend);
                break;

                case obj_bullet:
                    buffer_write(entity_buffer, buffer_u8, TYPE_BULLET);
                    buffer_write(entity_buffer, buffer_u32, entity.entity_id);
                    buffer_write(entity_buffer, buffer_u16, entity.x);
                    buffer_write(entity_buffer, buffer_u16, entity.y);
                    buffer_write(entity_buffer, buffer_u16, entity.image_angle);                
                break;
            }
        }
        
        var buffer_size = buffer_tell(entity_buffer);
        network_send_packet(player.socket, entity_buffer, buffer_size);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Server Receive Data

var type = ds_map_find_value(async_load, "type");
var eventid = ds_map_find_value(async_load, "id");
var command = -1;

//scr_log("Server Recieved - " + string(eventid) + " " + string(type));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive Connect Client

if (server == eventid &amp;&amp; type == network_type_connect)
{
    // Add new player entity
    var player = instance_create(50, 50, obj_server_player);
    player.image_blend = make_color_rgb(random(255), random(255), random(255));
    player.socket = ds_map_find_value(async_load, "socket");
    player.entity_id = entity_id++;
    ds_list_add(entity_list, player);
    
    // Figure out Player Number
    for (var i = 1; i &lt; 256; i++)
    {
        var is_used = false;
        for (j = 0; j &lt; ds_list_size(entity_list); j++)
        {
            var entity = ds_list_find_value(entity_list, j);
            if (entity.object_index == obj_server_player)
                if (entity.number == i)
                    is_used = true;
        }
        if (!is_used)
        {
            player.number = i;
            break;
        }
    }

    // Log that player from ip connected
    var ip = ds_map_find_value(async_load, "ip");    
    scr_log("(" + string(player.socket) + ") " + string (ip) + " Connected");
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive Disconnect Client

if (server == eventid &amp;&amp; type == network_type_disconnect)
{
    var socket = ds_map_find_value(async_load, "socket");

    // Find player by socket in entity_list
    for (var i = 0; i &lt; ds_list_size(entity_list); i++)
    {
        var player = ds_list_find_value(entity_list, i);
        if (player.object_index == obj_server_player)
        {
            if (player.socket == socket)
            {
                // Delete player from list and destory list
                ds_list_delete(entity_list, i);
                
                var ip = ds_map_find_value(async_load, "ip");    
                scr_log("(" + string(player.socket) + ") " + string (ip) + " Disconnected");
                
                with (player) instance_destroy();
                break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive Keyboard Command

if (type == network_type_data)
{
    var socket = eventid;
    var buffer = ds_map_find_value(async_load, "buffer");
    command = buffer_read(buffer, buffer_u8);
    
    if (command == CMD_KEYBOARD)
    {
        var player = -1;
        for (var i = 0; i &lt; ds_list_size(entity_list); i++)
        {
            player = ds_list_find_value(entity_list, i);
            if (player.object_index == obj_server_player)
            {
                if (player.socket == socket) break;
            }
            else
                player = -1;
        }
        if (player == -1) exit;
        
        player.last_cmd_id = buffer_read(buffer, buffer_u32);
        
        var key_count = buffer_read(buffer, buffer_u8);
        for (var i = 0; i &lt; key_count; i++)
        {
            var key = buffer_read(buffer, buffer_s16);
            
            if (key == vk_left)
                player.x -= player.move_speed;
            else if (key == vk_right)
                player.x += player.move_speed;
            else if (key == vk_up)
                player.y -= player.move_speed;
            else if (key == vk_down)
                player.y += player.move_speed;
 
            if (player.x &lt; 0)
                player.x = 0;
            else if (player.x &gt; obj_log_panel.x - 32)
                player.x = obj_log_panel.x - 32;                
 
            if (player.y &lt; 0)
                player.y = 0;
            else if (player.y &gt; room_height-32)
                player.y = room_height-32;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive Mouse Command

if (type == network_type_data &amp;&amp; command == CMD_MOUSE)
{
    // Find player based on socket
    var player = -1;
    for (var i = 0; i &lt; ds_list_size(entity_list); i++)
    {
        player = ds_list_find_value(entity_list, i);
        if (player.object_index == obj_server_player)
        {
            if (player.socket == socket) break;
        }
        else
            player = -1;
    }
    if (player == -1) exit;

    var _x = buffer_read(buffer, buffer_s16);
    var _y = buffer_read(buffer, buffer_s16);
    
    // Add bullet entity
    var bullet = instance_create(player.x + 8, player.y + 16, obj_bullet);
    bullet.entity_id = entity_id++;
    bullet.image_angle = point_direction(player.x + 8, player.y + 16, _x, _y);
    bullet.image_alpha = 0.25;
    with (bullet) move_towards_point(_x, _y, 5);
    
    ds_list_add(entity_list, bullet);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive Chat Command

if (type == network_type_data &amp;&amp; command == CMD_CHAT)
{
    var chat_text = buffer_read(buffer, buffer_string);

    for (var i = 0; i &lt; ds_list_size(player_list); i++)
    {
        var player = ds_list_find_value(player_list, i);
        if (player.socket == socket) break;
    }
    
    buffer_seek(entity_buffer, buffer_seek_start, 1);
    buffer_write(entity_buffer, buffer_u8, CMD_CHAT);
    buffer_write(entity_buffer, buffer_u8, player.number);
    buffer_write(entity_buffer, buffer_string, chat_text);
    var buffer_size = buffer_tell(entity_buffer);
    
    for (var i = 0; i &lt; ds_list_size(player_list); i++)
    {
        var player = ds_list_find_value(player_list, i);
        network_send_packet(player.socket, entity_buffer, buffer_size);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive Latency Command

if (type == network_type_data &amp;&amp; command == CMD_LATENCY)
{
    var sent_time = buffer_read(buffer, buffer_u32);
    
    buffer_seek(entity_buffer, buffer_seek_start, 1);
    buffer_write(entity_buffer, buffer_u8, CMD_LATENCY);
    buffer_write(entity_buffer, buffer_u32, sent_time);
    var buffer_size = buffer_tell(entity_buffer);
    network_send_packet(socket, entity_buffer, buffer_size);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Label Server Window

draw_set_color(c_red);
draw_set_halign(fa_left);
draw_set_valign(fa_bottom);
draw_text(0, room_height, "SERVER");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
