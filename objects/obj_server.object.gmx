<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initiate Server

tick = 0;

var port = 6515;
var max_clients = 32;
server = network_create_server(network_socket_tcp, port, max_clients);
if (server &lt; 0)
{
    show_message("Cannot create server");
    game_restart();
}
last_update = current_time;

socket_list = ds_list_create();
client_list = ds_map_create();
player_buffer = buffer_create(256, buffer_grow, 1);

alarm[0] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Client

instance_create(0, 0, obj_client);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Server Send Data

if ((current_time - last_update) &gt; 500)
{
    last_update = current_time;

    var socket_count = ds_list_size(socket_list);
    if (socket_count &gt; 0)
    {    
        var player_total = instance_number(obj_player);
        
        buffer_seek(player_buffer, buffer_seek_start, 1);
        buffer_write(player_buffer, buffer_u16, player_total);
        
        with (obj_player)
        {
            buffer_write(other.player_buffer, buffer_u16, x);
            buffer_write(other.player_buffer, buffer_u16, y);
            buffer_write(other.player_buffer, buffer_u16, image_blend);
        }
        
        var buffer_size = buffer_tell(player_buffer);
        
        for (i = 0; i &lt; socket_count; i++)
        {
            var socket = ds_list_find_value(socket_list, i);
            network_send_packet(socket, player_buffer, buffer_size);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Server Receive Data

var eventid = ds_map_find_value(async_load, "id");

if (server == eventid)
{
    var is_connect = ds_map_find_value(async_load, "type");
    var socket = ds_map_find_value(async_load, "socket");
    var ip = ds_map_find_value(async_load, "ip");
    
    if (is_connect == network_type_connect)
    {
        ds_list_add(socket_list, socket);        
        
        var instance = instance_create(100, 125, obj_player);
        instance.image_blend = c_yellow;
        
        ds_map_add(client_list, socket, instance);
    }
    else
    {
        var instance = ds_map_find_value(client_list, socket);
        ds_map_delete(client_list, socket);
        with (instance) instance_destroy();

        var index = ds_list_find_index(socket_list, socket);
        ds_list_delete(socket_list, index);
    }
}
else
{
    var buffer = ds_map_find_value(async_load, "buffer");
    var command = buffer_read(buffer, buffer_string);
    var socket = ds_map_find_value(async_load, "id");
    var instance = ds_map_find_value(client_list, socket);
    
    if (command == "input")
    {
        var tick = buffer_read(buffer, buffer_s16);
        var key = buffer_read(buffer, buffer_s16);
        
        if (key == vk_left)
            instance.x -= 3;
        else if (key == vk_right)
            instance.x += 3;
        else if (key == vk_up)
            instance.y -= 3;
        else if (key == vk_down)
            instance.y += 3;
    }
    else if (command == "name")
    {
    }
    else if (command == "ping")
    {
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_right);
draw_set_valign(fa_bottom);
draw_set_color(c_black);
if (ds_list_size(socket_list) &gt; 0)
{
    str = "Players: ";
    str += string(instance_number(obj_player));
    draw_text(room_width, room_height, str);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
