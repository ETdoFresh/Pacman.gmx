<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_pacman</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup Direction, Image, Movement, Target

// Image Setup
image_speed = 1;
image_blend = c_yellow;

// Direction Setup
previous_direction = LEFT;
current_direction = LEFT;
desired_direction = LEFT;
target_image_angle = 180; // LEFT

// Movement Setup
move_speed = 3; // px per step
turn_speed = 10; // degrees per step

// Create target to follow
my_target = instance_create(x, y, obj_target);
my_target.image_blend = c_yellow;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Target Object

// Determine Current Direction
previous_direction = current_direction;
current_direction = desired_direction;

// Position obj_target to obj_pacman's current_direction
my_target.x = x;
my_target.y = y;

if (current_direction == LEFT)
    my_target.x -= 32;
else if (current_direction == RIGHT)
    my_target.x += 32;
else if (current_direction == UP)
    my_target.y -= 32;
else if (current_direction == DOWN)
    my_target.y += 32;

// Snap to Grid and Check for walls
var cannotMove = false;
with (my_target)
{
    move_snap(32, 32);
    if (!place_free(x, y))
    {
        x = xprevious;
        y = yprevious;
        cannotMove = true;
    }
}

// Run again if Pacman could not move
if (cannotMove &amp;&amp; current_direction != previous_direction)
{
    cannotMove = false;
    current_direction = previous_direction;
    my_target.x = x;
    my_target.y = y;
    
    if (current_direction == LEFT)
        my_target.x -= 32;
    else if (current_direction == RIGHT)
        my_target.x += 32;
    else if (current_direction == UP)
        my_target.y -= 32;
    else if (current_direction == DOWN)
        my_target.y += 32;
    
    with (my_target)
    {
        move_snap(32, 32);
        if (!place_free(x, y))
        {
            x = xprevious;
            y = yprevious;
            cannotMove = true;
        }
    }
}

// Set Target Image Angle
if (current_direction = RIGHT)
    target_image_angle = 0;
else if (current_direction = UP)
    target_image_angle = 90;
else if (current_direction = LEFT)
    target_image_angle = 180;
else if (current_direction = DOWN)
    target_image_angle = 270;
    
// Increment Image Angle
var total_turn = target_image_angle - image_angle;
var i = -1;
while(i &lt;= 1)
{
    var next_turn = target_image_angle + i * 360 - image_angle;
    if (abs(total_turn) &gt; abs(next_turn))
        total_turn = next_turn;
    i++;
}

var turning_increment = min(turn_speed, abs(total_turn));
image_angle += sign(total_turn) * turning_increment;

// Clamp within 0 and 360
while (image_angle &gt;= 360) image_angle -= 360;
while (image_angle &lt; 0) image_angle += 360;

// Move towards Target
if (cannotMove &amp;&amp; point_distance(x, y, my_target.x, my_target.y) &lt; move_speed)
{
    move_snap(32, 32);
    speed = 0;
    image_speed = 0;
}
else
{
    move_towards_point(my_target.x, my_target.y, move_speed);
    image_speed = 1;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_power_pellet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Eat Power Pellet

score += 50;

with (obj_ghost)
    state = "Frightened";

with (obj_controller)
{
    alarm[0] = fright_seconds * room_speed;
    event_perform(ev_other, ev_user0);
}
    
with (other)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_pellet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Eat Pellet

score += 10;

with(obj_controller)
    event_perform(ev_other, ev_user0);

with (other)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_ghost">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// React to Ghost Collision based on State

if (other.state == "Normal")
{
    with (obj_ghost)
        event_perform(ev_other, ev_user1);
        
    instance_deactivate_object(obj_ghost);
    
    lives--;
    
    instance_change(obj_pacman_die, true);
    
    with (my_target)
        instance_destroy();
}
else if (other.state == "Frightened")
{
    other.state = "Eyes";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Direction DOWN
desired_direction = DOWN;
target_image_angle = -90;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Direction RIGHT
desired_direction = RIGHT;
target_image_angle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Direction UP
desired_direction = UP;
target_image_angle = 90;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Direction LEFT
desired_direction = LEFT;
target_image_angle = 180;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
