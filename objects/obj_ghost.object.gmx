<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create All Ghosts Variables

// Set Animation Speed
var total_animation_seconds = .2;
var seconds_per_frame = total_animation_seconds / image_number;
var seconds_per_step = 1 / room_speed;
image_speed = seconds_per_step / seconds_per_frame;

normal_speed = 2;
eyes_speed = 4;
home_speed = 1.5;
frightened_speed = 2 * 0.5;
current_direction = NONE;
body_color = c_white;
dot_counter = 0;
dot_counter_limit = 999;
current_target = 1;

// Initialize Leave Home Variables
first_target_x = 464;
first_target_y = 480;
second_target_x = 464;
second_target_y = 384;


// Set Initial States
state = "Normal";
ai_state = "Home";

// Create Targets
my_target = instance_create(x, y, obj_target);
end_target = instance_create(x, y, obj_target);
scatter_target_x = x;
scatter_target_y = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Wrap Ghosts
if (x &lt; 16) 
{
    x = 16 + 28 * 32;
    my_target.x = x;
}
else if (x &gt; 16 + 28 * 32)
{
    x = 16;
    my_target.x = x;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Home State
if (ai_state = "Home")
{
    speed = 0; // Stay still
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Leave Home State
if (ai_state == "Leave Home")
{
    // Move to middle of home first
    if (current_target == 1)
    {
        if (object_index == obj_inky) current_direction = RIGHT;
        if (object_index == obj_clyde) current_direction = LEFT;
        move_towards_point(first_target_x, first_target_y, home_speed * 0.5);
        if (point_distance(x, y, first_target_x, first_target_y) &lt; home_speed)
        {
            current_target = 2;
        }
    }
    
    // Then move to "front door" of home
    else if (current_target == 2)
    {
        current_direction = UP;
        move_towards_point(second_target_x, second_target_y, home_speed * 0.5);
        
        // Left home!
        if (point_distance(x, y, second_target_x, second_target_y) &lt; home_speed)
        {
            current_direction = LEFT;
            current_target = 1;
            
            with (my_target)
            {
                x = other.x - 32;
                y = other.y;
                move_snap(32, 32);
            }
            
            if (state == "Frightened")
            {
                ai_state = "Wander";
                move_towards_point(my_target.x, my_target.y, frightened_speed);
            }
            else
            {
                ai_state = obj_controller.level_state;
                move_towards_point(my_target.x, my_target.y, normal_speed);
            }
        }
    }  
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Chase State

if (ai_state == "Chase")
{
    event_perform(ev_other, ev_user0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scatter State

if (ai_state == "Scatter")
{
    end_target.x = scatter_target_x;
    end_target.y = scatter_target_y;
    event_perform(ev_other, ev_user0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Wander State

if (ai_state == "Wander")
{
    with (end_target)
    {
        x = random(28 * 32);
        y = random(31 * 32);
        move_snap(32, 32);
    }
    event_perform(ev_other, ev_user0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Return Home State

if (ai_state == "Return Home")
{
    end_target.x = 464;
    end_target.y = 384;
    
    if (point_distance(x, y, end_target.x, end_target.y) &lt; eyes_speed)
    {
        ai_state = obj_controller.level_state;
        state = "Normal";
    }
    else
    {
        event_perform(ev_other, ev_user0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reverse Direction

my_target.x = x;
my_target.y = y;
    
if (current_direction == LEFT) 
    current_direction = RIGHT;
else if (current_direction == RIGHT) 
    current_direction = LEFT;
else if (current_direction == UP) 
    current_direction = DOWN;
else if (current_direction == DOWN) 
    current_direction = UP;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset Instance
x = xstart;
y = ystart;
my_target.x = xstart;
my_target.y = ystart;

ai_state = "Home";
state = "Normal";
current_direction = -1;
current_target = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Immediate Target

var move_speed = normal_speed;
if (state == "Frightened") move_speed = frightened_speed;
if (state == "Eyes") move_speed = eyes_speed;

if (point_distance(x, y, my_target.x, my_target.y) &lt; move_speed)
{
    var new_direction = current_direction;
    var distance = 10000;
    var not_safe_zone = (x &lt; 352 || x &gt; 576) || ((y &lt; 352 || y &gt; 416) &amp;&amp; (y &lt; 736 || y &gt; 800))
    var not_ghost_exit = (x &lt; 416 || x &gt; 512) || (y &lt; 352 || y &gt; 416)
    
    if (place_free(my_target.x - 32, my_target.y) &amp;&amp; current_direction != RIGHT)
    {
        if (point_distance(x - 32, y, end_target.x, end_target.y) &lt; distance)
        {
            new_direction = LEFT;
            distance = point_distance(x - 32, y, end_target.x, end_target.y);
        }
    }
    if (place_free(my_target.x, my_target.y - 32) &amp;&amp; current_direction != DOWN)
    {
        if (not_safe_zone)
        {
            if (point_distance(x, y - 32, end_target.x, end_target.y) &lt; distance)
            {
                new_direction = UP;
                distance = point_distance(x, y - 32, end_target.x, end_target.y);
            }
        }
    }
    if (place_free(my_target.x + 32, my_target.y) &amp;&amp; current_direction != LEFT)
    {
        if (point_distance(x + 32, y, end_target.x, end_target.y) &lt; distance)
        {
            new_direction = RIGHT;
            distance = point_distance(x + 32, y, end_target.x, end_target.y);
        }
    }
    if (place_free(my_target.x, my_target.y + 32) &amp;&amp; current_direction != UP)
    {
        if (not_ghost_exit)
        {
            if (point_distance(x, y + 32, end_target.x, end_target.y) &lt; distance)
            {
                new_direction = DOWN;
                distance = point_distance(x, y + 32, end_target.x, end_target.y);
            }
        }
    }
    
    current_direction = new_direction

    my_target.x = x;
    my_target.y = y;
    if (current_direction == RIGHT) my_target.x += 32;
    else if (current_direction == UP) my_target.y -= 32;
    else if (current_direction == LEFT) my_target.x -= 32;
    else if (current_direction == DOWN) my_target.y += 32;
    
    with (my_target)
        move_snap(32, 32);

    move_towards_point(my_target.x, my_target.y, move_speed);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Normal State

if (state == "Normal")
{
    // Draw Body
    draw_sprite_ext(spr_ghost_body, -1, x, y, image_xscale, image_yscale, image_angle, body_color, 1);
    
    // Setup to Draw Eyes
    var sub_image = 4;
    if (current_direction == UP) sub_image = 0;
    if (current_direction == DOWN) sub_image = 1;
    if (current_direction == LEFT) sub_image = 2;
    if (current_direction == RIGHT) sub_image = 3;
    
    // Draw Eyes
    draw_sprite_ext(spr_ghost_eyes, sub_image, x, y, image_xscale, image_yscale, image_angle, c_white, 1);
    
    // Draw Pupils
    var pupil_color = make_color_rgb(60, 87, 167);
    draw_sprite_ext(spr_ghost_pupils, sub_image, x, y, image_xscale, image_yscale, image_angle, pupil_color, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Frightened State

if (state == "Frightened")
{
    // Draw Body
    var draw_color = make_color_rgb(60, 87, 167);
    draw_sprite_ext(spr_ghost_body, -1, x, y, image_xscale, image_yscale, image_angle, draw_color, 1);
    
    // Draw Eyes
    var eye_color = make_color_rgb(255, 207, 50);
    draw_sprite_ext(spr_ghost_eyes, 5, x, y, image_xscale, image_yscale, image_angle, eye_color, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Eyes State

if (state == "Eyes")
{
    // Setup to Draw Eyes
    var sub_image = 4;
    if (current_direction == UP) sub_image = 0;
    if (current_direction == DOWN) sub_image = 1;
    if (current_direction == LEFT) sub_image = 2;
    if (current_direction == RIGHT) sub_image = 3;
    
    // Draw Eyes
    draw_sprite_ext(spr_ghost_eyes, sub_image, x, y, image_xscale, image_yscale, image_angle, c_white, 1);
    
    // Draw Pupils
    var pupil_color = make_color_rgb(60, 87, 167);
    draw_sprite_ext(spr_ghost_pupils, sub_image, x, y, image_xscale, image_yscale, image_angle, pupil_color, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// (Debug) State Text
draw_set_halign(fa_center);
draw_text(x, y - 40, ai_state);
draw_text(x, y - 52, state);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
