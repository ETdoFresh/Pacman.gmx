<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initiate Level Variables

level = 1;
event_perform(ev_other, ev_user3); // Load Level Settings
event_perform(ev_other, ev_user1); // Reset Level State

is_paused = false;
pause_states = 0;

is_loading = false;

ghost_points = 200;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Restore after Eat Frighten Pause

is_paused = false;
event_perform(ev_other, ev_user4);

obj_pacman.visible = true;

for (var i = 0; i &lt; 4; i++)
    with (instance_find(obj_ghost, i))
    {
        if (visible == false)
        {
            visible = true;
            state = "Eyes";
            ai_state = "Return Home";
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Evict Ghost from House Timer

var ghosts;
ghosts[0] = obj_blinky;
ghosts[1] = obj_pinky;
ghosts[2] = obj_inky;
ghosts[3] = obj_clyde;

for (var i = 0; i &lt; array_length_1d(ghosts); i++)
{
    var ghost = ghosts[i];
    if (instance_exists(ghost) &amp;&amp; ghost.ai_state == "Home")
    {
        with (ghost)
        {
            ai_state = "Leave Home";
            exit;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manage Level State

var timer;
timer[0] = 7;
timer[1] = 20;
timer[2] = 7;
timer[3] = 20;
timer[4] = 5;
timer[5] = 20;
timer[6] = 5;

level_iteration++;

if (level_iteration &lt; array_length_1d(timer))
    alarm[1] = timer[level_iteration] * room_speed;

if (level_iteration % 2 == 1)
    level_state = "Chase";
else
    level_state = "Scatter";

with(obj_ghost)
{
    if (ai_state == "Chase" || ai_state == "Scatter")
    {
        ai_state = other.level_state;
        event_perform(ev_other, ev_user2); // Reverse Direction
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset Frightened to Original
with (obj_ghost)
{
    if (state == "Frightened")
        state = "Normal";
    if (ai_state == "Wander")
        ai_state = other.level_state;
        
    alarm[0] = -1;
    frightened_is_blue = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Wrap objects
if (instance_exists(obj_pacman))
{
    if (obj_pacman.x &lt; 16) obj_pacman.x = 16 + 28 * 32;
    else if (obj_pacman.x &gt; 16 + 28 * 32) obj_pacman.x = 16;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Process Pause

// Store states and change states to Pause
if (is_paused)
{
    pause_states[4] = obj_pacman.state;
    
    if (instance_exists(obj_bonus_fruit))
        pause_states[5] = obj_bonus_fruit.alarm[0];
    
    for (var i = 0; i &lt; 4; i++)
        with (instance_find(obj_ghost, i))
        {
            other.pause_states[i] = ai_state;
            other.pause_states[i + 20] = alarm[0];
        }
    
    for (var i = 0; i &lt; 12; i++)
        pause_states[10 + i] = alarm[i];        
           
    obj_pacman.state = "Pause";
    for (var i = 0; i &lt; 4; i++)
        with (instance_find(obj_ghost, i))
        {
            ai_state = "Pause";
            alarm[0] = -1;
        }

    if (instance_exists(obj_bonus_fruit))
        obj_bonus_fruit.alarm[0] = -1;

    for (var i = 0; i &lt; 12; i++)
        alarm[i] = -1;   
}

// Restore State
else
{
    obj_pacman.state = pause_states[4];
    for (var i = 0; i &lt; 4; i++)
        with (instance_find(obj_ghost, i))
        {
            ai_state = other.pause_states[i];
            alarm[0] = other.pause_states[i + 20]
        }
    
    if (instance_exists(obj_bonus_fruit))
        obj_bonus_fruit.alarm[0] = pause_states[5];

    for (var i = 0; i &lt; 12; i++)
        alarm[i] = pause_states[10 + i];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load Level Settings

global_dot_counter = 0;
bonus_dot_counter = 0;
did_die_on_level = false;

ini_open("levels.ini");

var level_string = "Level" + string(level);
bonus_symbol = ini_read_string(level_string, "Bonus Symbol", "None");
bonus_points = ini_read_real(level_string, "Bonus Points", 123);
pacman_speed = real(ini_read_string(level_string, "Pac-Man Speed", "123%"));
pacman_dots_speed = real(ini_read_string(level_string, "Pac-Man Dots Speed", "123%"));
ghost_speed = real(ini_read_string(level_string, "Ghost Speed", "123%"));
ghost_tunnel_speed = real(ini_read_string(level_string, "Ghost Tunnel Speed", "123%"));
elroy1dotsleft = ini_read_real(level_string, "Elroy 1 Dots Left", 123);
elroy1dotsspeed = real(ini_read_string(level_string, "Elroy 1 Speed", "123%"));
elroy2dotsleft = ini_read_real(level_string, "Elroy 2 Dots Left", 123);
elroy2dotsspeed = real(ini_read_string(level_string, "Elroy 2 Speed", "123%"));
fright_pacman_speed = real(ini_read_string(level_string, "Fright Pac-Man Speed", "123"));
fright_pacman_dots_speed = real(ini_read_string(level_string, "Fright Pac-Man Dots Speed", "123%"));
fright_ghost_speed = real(ini_read_string(level_string, "Fright Ghost Speed", "123%"));
fright_time = ini_read_real(level_string, "Fright Time", 123);
number_of_flashes = ini_read_real(level_string, "Number of Flashes", 123);
pinky_dot_limit = ini_read_real(level_string, "Pinky Dot Limit", 123);
inky_dot_limit = ini_read_real(level_string, "Inky Dot Limit", 123);
clyde_dot_limit = ini_read_real(level_string, "Clyde Dot Limit", 123);
global_pinky = ini_read_real(level_string, "Global Pinky", 123);
global_inky = ini_read_real(level_string, "Global Inky", 123);
global_clyde = ini_read_real(level_string, "Global Clyde", 123);
timer_limit = ini_read_real(level_string, "Timer Limit", 123);
scatter1 = ini_read_real(level_string, "Scatter1", 123);
scatter2 = ini_read_real(level_string, "Scatter2", 123);
scatter3 = ini_read_real(level_string, "Scatter3", 123);
scatter4 = ini_read_real(level_string, "Scatter4", 123);
chase1 = ini_read_real(level_string, "Chase1", 123);
chase2 = ini_read_real(level_string, "Chase2", 123);
chase3 = ini_read_real(level_string, "Chase3", 123);
chase4 = ini_read_real(level_string, "Chase4", 123);

ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Add a yum, yum bonus fruit

//464, 576


with (instance_create(464, 576, obj_bonus_fruit))
{
    if (other.bonus_symbol == "Cherries")
        sprite_index = spr_cherry;
    else if (other.bonus_symbol == "Strawberry")
        sprite_index = spr_strawberry;
    else
        sprite_index = spr_cherry;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset Level State

level_state = "Scatter";
alarm[1] = 7 * room_speed;
level_iteration = 0;

alarm[2] = 4 * room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Process Dot Eaten

var ghosts;
ghosts[0] = obj_pinky;
ghosts[1] = obj_inky;
ghosts[2] = obj_clyde;
ghosts[3] = obj_blinky;

if (!instance_exists(obj_pellet) &amp;&amp; !instance_exists(obj_power_pellet))
{
    level++;
    timeline_index = tl_level_complete
    timeline_position = 0;
    timeline_running = true;
    exit;
}

// Reset Evict Ghost Timer
alarm[2] = 4 * room_speed;

// Bonus Fruit Check
bonus_dot_counter++;
if (bonus_dot_counter == 70 || bonus_dot_counter == 170)
    event_perform(ev_other, ev_user2);

if (did_die_on_level)
{
    global_dot_counter++;
    if (global_dot_counter == global_pinky &amp;&amp; obj_pinky.ai_state == "Home")
        obj_pinky.ai_state = "Leave Home";
    else if (global_dot_counter == global_inky &amp;&amp; obj_inky.ai_state == "Home")
        obj_inky.ai_state = "Leave Home";
    else if (global_dot_counter == global_clyde &amp;&amp; obj_clyde.ai_state == "Home")
        obj_clyde.ai_state = "Leave Home";
}
else
{
    for (var i = 0; i &lt; array_length_1d(ghosts); i++)
    {
        var ghost = ghosts[i];
        if (instance_exists(ghost))
        {
            if (ghost.ai_state == "Home")
            {
                with (ghost)
                {
                    dot_counter++;
                    if (dot_counter &gt;= dot_counter_limit)
                    {
                        ai_state = "Leave Home";
                        exit;
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Score
draw_set_halign(fa_center);
draw_set_color(c_white);

draw_text_ext(1120, 0, "Score: 
" + string(score), 15, 300);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Toggle Pause

if (is_loading) exit;

is_paused = !is_paused;

event_perform(ev_other, ev_user4); // Process Pause
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
