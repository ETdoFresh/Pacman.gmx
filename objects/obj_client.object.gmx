<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Client

scr_log("Creating Client...")

ip = "127.0.0.1";
client = network_create_socket(network_socket_tcp);

player = 0;
players = 0;
sprite_value = 3;

command_buffer = buffer_create(256, buffer_grow, 1);
last_update = 0;
update_rate = 0;

latency = 0;
latency_interval = ceil(1000 / room_speed);
alarm[0] = latency_interval;

scr_log("Client Created")
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Entity Interpolation

is_entity_interpolation = false;
client_interpolation = 250;
packet_history = ds_queue_create();
past_packet = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Client Prediction

is_input_predicted = false;
cmd_id = 0;
predict_history = ds_queue_create();

DOWN = 0;
LEFT = 1;
RIGHT = 2;
UP = 3;

move_speed = 2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Soldier Sprite

is_soldier_enabled = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(client);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send Latency Command

buffer_seek(command_buffer, buffer_seek_start, 0);
buffer_write(command_buffer, buffer_u8, CMD_LATENCY);
buffer_write(command_buffer, buffer_u32, current_time);
var buffer_size = buffer_tell(command_buffer)
network_send_packet(client, command_buffer, buffer_size);
alarm[0] = latency_interval;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// How many keys are pressed?

var key_count = 0;
if (keyboard_check(vk_up)) key_count++;
if (keyboard_check(vk_down)) key_count++;
if (keyboard_check(vk_left)) key_count++;
if (keyboard_check(vk_right)) key_count++;

if (key_count &gt; 0)
    cmd_id++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Entity Interpolation

if (is_entity_interpolation &amp;&amp; ds_queue_size(packet_history) &gt; 0)
{
    var calculated_interpolation = max(client_interpolation, floor(update_rate * 2.25));
    var render_time = current_time - calculated_interpolation;

    var head = ds_queue_head(packet_history);
    while (ds_queue_size(packet_history) &gt; 0 &amp;&amp; ds_list_find_value(head, 0) &lt; render_time)
    {
        past_packet = ds_queue_dequeue(packet_history);
        head = ds_queue_head(packet_history);
    }

    var past_time = ds_list_find_value(past_packet, 0);
    var head_time = ds_list_find_value(head, 0);

    if (past_time &gt; 0 &amp;&amp; head_time != past_time)
    {
        //scr_log("Interop r: " + string(render_time) + " 1: " + string(before_time) + " 2: " + string(after_time));
        var t1 = render_time - past_time;
        var t2 = head_time - past_time;
        var diff = t1 / t2;
        
        for (var i = 0; i &lt; instance_number(obj_client_target); i++)
        {
            if (i == player) continue;
            var instance = instance_find(obj_client_target, i);
            
            for (var j = 0; j &lt; sprite_value; j++)
            {
                var _x1 = ds_list_find_value(past_packet, 1 + i * sprite_value + j);
                var _x2 = ds_list_find_value(head, 1 + i * sprite_value + j);
                _x1 += (_x2 - _x1) * diff;
                if (j == 0) instance.x = _x1;
                else if (j == 1) instance.y = _x1;
                else if (j == 2) instance.image_blend = _x1;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input Prediction

if (key_count &gt; 0 &amp;&amp; is_input_predicted)
{
    var instance = instance_find(obj_client_target, player);
    
    var _x = instance.x;
    var _y = instance.y;
    var _color = instance.image_blend;
    
    if (ds_queue_size(predict_history) &gt; 0)
    {
        _x = ds_list_find_value(ds_queue_tail(predict_history), 1);
        _y = ds_list_find_value(ds_queue_tail(predict_history), 2);
        _color = ds_list_find_value(ds_queue_tail(predict_history), 3);
    }

    if (keyboard_check(vk_left))
    {
        _x -= move_speed;
    }
    if (keyboard_check(vk_right))
    {
        _x += move_speed;
    }    
    if (keyboard_check(vk_up))
    {
        _y -= move_speed;
    }
    if (keyboard_check(vk_down))
    {
        _y += move_speed;
    }
    
    instance.x = _x;
    instance.y = _y;
    
    var prediction = ds_list_create();
    ds_list_add(prediction, cmd_id);
    ds_list_add(prediction, _x);
    ds_list_add(prediction, _y);
    ds_list_add(prediction, _color);
    
    ds_queue_enqueue(predict_history, prediction);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Soldier Step

while (instance_number(obj_soldier) &lt; players)
    instance_create(0, 0, obj_soldier);

while (instance_number(obj_soldier) &gt; players)
    with(instance_find(obj_soldier, 0))
        instance_destroy();

for (var i = 0; i &lt; players; i++)
    with (instance_find(obj_soldier, i))
        target = instance_find(obj_client_target, i);

if (is_soldier_enabled)
{
    obj_soldier.visible = true;
    obj_client_target.visible = false;
}
else
{
    obj_soldier.visible = false;
    obj_client_target.visible = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send Keys (if pressed)

if (key_count &gt; 0)
{
    buffer_seek(command_buffer, buffer_seek_start, 0);
    buffer_write(command_buffer, buffer_u8, CMD_KEYBOARD);
    buffer_write(command_buffer, buffer_u32, cmd_id);
    buffer_write(command_buffer, buffer_u8, key_count);

    if (keyboard_check(vk_left))
        buffer_write(command_buffer, buffer_s16, vk_left);
    if (keyboard_check(vk_right))
        buffer_write(command_buffer, buffer_s16, vk_right);
    if (keyboard_check(vk_up))
        buffer_write(command_buffer, buffer_s16, vk_up);
    if (keyboard_check(vk_down))
        buffer_write(command_buffer, buffer_s16, vk_down);
    
    var buffer_size = buffer_tell(command_buffer)
    network_send_packet(client, command_buffer, buffer_size);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Client Recieve Packet

var eventid = ds_map_find_value(async_load, "id");
var command = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receieve Update Command

if (client == eventid)
{
    var buffer = ds_map_find_value(async_load, "buffer");
    var command = buffer_read(buffer, buffer_u8);
    
    // Offset by one more if you are not a local client
    if (!instance_exists(obj_server))
        command = buffer_read(buffer, buffer_u8);
    
    if (command == CMD_UPDATE)
    {
        update_rate = current_time - last_update;
        last_update = current_time;
    
        player = buffer_read(buffer, buffer_u8);
        players = buffer_read(buffer, buffer_u8);
        var last_cmd_id = buffer_read(buffer, buffer_u32);
        
        /// Don't deal with packets older than 200 milliseconds
        if (last_cmd_id &lt; cmd_id - ceil(200 / room_speed))
            exit;
        
        // Prepare incoming data to be drawn
        while (instance_number(obj_client_target) &lt; players)
            instance_create(0, 0, obj_client_target);
        
        while (instance_number(obj_client_target) &gt; players)
            with(instance_find(obj_client_target, 0))
                instance_destroy();
        
        for (var i = 0; i &lt; players; i++)
        {
            var instance = instance_find(obj_client_target, i);
            instance.x = buffer_read(buffer, buffer_u16);
            instance.y = buffer_read(buffer, buffer_u16);
            instance.image_blend = buffer_read(buffer, buffer_u32);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive Chat Command

if (client == eventid &amp;&amp; command == CMD_CHAT)
{
    chat_from = buffer_read(buffer, buffer_u8);
    chat_text = buffer_read(buffer, buffer_string);
    
    scr_log("[" + string(chat_from) + "] " + string(chat_text));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive Latency Command

if (client == eventid &amp;&amp; command == CMD_LATENCY)
{
    sent_time = buffer_read(buffer, buffer_u32);
    latency = current_time - sent_time;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Entity Interpolation

if (is_entity_interpolation &amp;&amp; client == eventid &amp;&amp; command == CMD_UPDATE)
{ 
    var current_sprites = ds_list_create();
    
    ds_list_add(current_sprites, current_time);
    for (var i = 0; i &lt; instance_number(obj_client_target); i++)
    {
        var instance = instance_find(obj_client_target, i);
        ds_list_add(current_sprites, instance.x);
        ds_list_add(current_sprites, instance.y);
        ds_list_add(current_sprites, instance.image_blend);
    }
    
    ds_queue_enqueue(packet_history, current_sprites);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input Prediction

if (is_input_predicted &amp;&amp; client == eventid &amp;&amp; command == CMD_UPDATE)
{        
    // Compare with Prediction
    if (ds_queue_size(predict_history) &gt; 0 &amp;&amp; last_cmd_id &gt; 0)
    {
        // Clear queue until prediction time (or clear completely)
        var list = ds_queue_head(predict_history)
        while (ds_queue_size(predict_history) &gt; 0 &amp;&amp; ds_list_find_value(list, 0) &lt; last_cmd_id)
            list = ds_queue_dequeue(predict_history);
        
        // Run following if we find exact prediction
        if (ds_list_find_value(list, 0) == last_cmd_id)
        {
            var instance = instance_find(obj_client_target, player);
            var incoming = 0;
            incoming[0] = instance.x;
            incoming[1] = instance.y;
            incoming[2] = instance.image_blend;
            
            for (var i = 0; i &lt; sprite_value; i++)
            {
                received = incoming[i];
                predicted = ds_list_find_value(list, i + 1);
                
                if (received != predicted)
                {
                    scr_log("Prediction Error " + string(last_cmd_id) + " " + string(received) + " " + string(predicted));
                        
                    // Adjust error for current and future predictions
                    if (ds_queue_size(predict_history) &gt; 0)
                    {
                        var delta_value = received - predicted;
                        for (var j = 0; j &lt; ds_queue_size(predict_history); j++)
                        {
                            var new_list = ds_queue_dequeue(predict_history);
                            var new_value = ds_list_find_value(new_list, i + 1) + delta_value;
                            ds_list_replace(new_list, i + 1, new_value);
                            ds_queue_enqueue(predict_history, new_list);
                        }
                        
                        var new_list = ds_queue_tail(predict_history);
                        var new_value = ds_list_find_value(new_list, i + 1);
                        
                        if (i == 0) instance.x = new_value;
                        else if (i == 1) instance.y = new_value;
                        else if (i == 2) instance.image_blend = new_value;
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send Chat Message

if (string_length(chat_text) &gt; 0)
{
    buffer_seek(command_buffer, buffer_seek_start, 0);
    buffer_write(command_buffer, buffer_u8, CMD_CHAT);
    buffer_write(command_buffer, buffer_string, chat_text);
    var buffer_size = buffer_tell(command_buffer)
    network_send_packet(client, command_buffer, buffer_size);
    chat_text = "";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Connect Client

scr_log ("Connecting Client...");

var err = network_connect(client, ip, PORT);
if (err &lt; 0)
{
    scr_log("Unable to connect to server");
    instance_destroy();
}
else
{
    scr_log("Client Connected");
    room_goto(rm_game);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw all sprites

var index = 0;
var str = "";
str += "Player Num: " + string(player);
str += "#Players: " + string(players);

for (var i = 0; i &lt; players; i++)
{
    var _x, _y, _blend, instance;
    instance = instance_find(obj_client_target, i);
    _x = instance.x;
    _y = instance.y;
    _blend = instance.image_blend;

    str += "#Player[" + string(i) + "].x: " + string(_x);
    str += "#Player[" + string(i) + "].y: " + string(_y);
    str += "#Player[" + string(i) + "].color: " + string(_blend);

    draw_set_color(c_white);
    if (player == i) draw_set_color(c_navy);
    draw_set_valign(fa_top);    
    draw_set_halign(fa_center);
    draw_text(_x + 8, _y - 20, "Player " + string(i));
}

draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
str += "#Latency: " + string(latency);
str += "#Update Rate: " + string(update_rate);
str += "#Interpolation: " + string(max(client_interpolation, floor(update_rate * 2.25)));
str += "#Num Targets: " + string(instance_number(obj_client_target));
draw_text(0, 0, str);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
