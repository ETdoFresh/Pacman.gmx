<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Client

scr_log("Creating Client...")

ip = "127.0.0.1";
client = network_create_socket(network_socket_tcp);

player = 0;
sprite_count = 0;
sprites = ds_list_create();
command_buffer = buffer_create(256, buffer_grow, 1);

scr_log("Client Created")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(client);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send Keys (if pressed)

var key_count = 0;
if (keyboard_check(vk_up)) key_count++;
if (keyboard_check(vk_down)) key_count++;
if (keyboard_check(vk_left)) key_count++;
if (keyboard_check(vk_right)) key_count++;

if (key_count &gt; 0)
{
    buffer_seek(command_buffer, buffer_seek_start, 0);
    buffer_write(command_buffer, buffer_u8, CMD_KEYBOARD);
    buffer_write(command_buffer, buffer_u8, key_count);

    if (keyboard_check(vk_up))
        buffer_write(command_buffer, buffer_s16, vk_up);
    if (keyboard_check(vk_down))
        buffer_write(command_buffer, buffer_s16, vk_down);
    if (keyboard_check(vk_left))
        buffer_write(command_buffer, buffer_s16, vk_left);
    if (keyboard_check(vk_right))
        buffer_write(command_buffer, buffer_s16, vk_right);
    
    var buffer_size = buffer_tell(command_buffer)
    network_send_packet(client, command_buffer, buffer_size);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Client Recieve Packet

var eventid = ds_map_find_value(async_load, "id");

if (client == eventid)
{
    var buffer = ds_map_find_value(async_load, "buffer");
    var command = buffer_read(buffer, buffer_u8);
    
    if (!instance_exists(obj_server))
        command = buffer_read(buffer, buffer_u8);
    
    if (command == CMD_UPDATE)
    {
        player = buffer_read(buffer, buffer_u8);
        sprite_count = buffer_read(buffer, buffer_u8);
        ds_list_clear(sprites);
        
        for (var i = 0; i &lt; sprite_count; i++)
        {
            ds_list_add(sprites, buffer_read(buffer, buffer_u16)); // x
            ds_list_add(sprites, buffer_read(buffer, buffer_u16)); // y
            ds_list_add(sprites, buffer_read(buffer, buffer_u32)); // image_blend
        }
    }       
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Connect Client

scr_log ("Connecting Client...");

var err = network_connect(client, ip, PORT);
if (err &lt; 0)
{
    scr_log("Unable to connect to server");
    instance_destroy();
}
else
{
    scr_log("Client Connected");
    room_goto(rm_game);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw all sprites

var index = 0;
for (var i = 0; i &lt; sprite_count; i++)
{
    var _x, _y, _blend;
    _x = ds_list_find_value(sprites, index++);
    _y = ds_list_find_value(sprites, index++);
    _blend = ds_list_find_value(sprites, index++);
    
    draw_sprite_ext(spr_player, 0, _x, _y, 1, 1, 0, _blend, 1.0);
    
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    draw_text(_x + 16, _y - 20, "Player " + string(i));
    
    draw_text(_x + 16, _y + 32, string(_x) + ", " + string(_y));
}
draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_text(0, 0, "Player Num: " + string(player)
 + "#Players: " + string(sprites)
 + "#sprite[0]: " + string(ds_list_find_value(sprites, 0))
 + "#sprite[1]: " + string(ds_list_find_value(sprites, 1))
 + "#sprite[2]: " + string(ds_list_find_value(sprites, 2))
 + "#sprite[3]: " + string(ds_list_find_value(sprites, 3))
);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
