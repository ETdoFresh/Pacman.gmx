<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Client

scr_log("Creating Client...")

ip = "127.0.0.1";
client = network_create_socket(network_socket_tcp);

player_number = -1;
entities = 0;
entity_list = ds_list_create();
update_data = ds_list_create();
sync_list = ds_list_create();

command_buffer = buffer_create(256, buffer_grow, 1);
server_tick = 0;
input_id = 0;
last_update = 0;
update_rate = 0;

latency = 0;
latency_interval = ceil(1000 / room_speed);
alarm[0] = latency_interval;

scr_log("Client Created");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Entity Interpolation

is_entity_interpolation = false;
client_interpolation = 200;
packet_history = ds_list_create();
past_packet = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input Prediction

is_input_predicted = false;
predict_history = ds_list_create();
input_steps = 0;
update_input_id = 0;
update_input_steps = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Soldier Sprite

is_soldier_enabled = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy Client

network_destroy(client);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send Latency Command

buffer_seek(command_buffer, buffer_seek_start, 0);
buffer_write(command_buffer, buffer_u8, CMD_LATENCY);
buffer_write(command_buffer, buffer_u32, current_time);
var buffer_size = buffer_tell(command_buffer)
network_send_packet(client, command_buffer, buffer_size);
alarm[0] = latency_interval;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// How many keys are pressed?

input_steps++;
var input_count = 0;

if (keyboard_check_pressed(vk_up)) input_count++;
if (keyboard_check_pressed(vk_down)) input_count++;
if (keyboard_check_pressed(vk_left)) input_count++;
if (keyboard_check_pressed(vk_right)) input_count++;
if (keyboard_check_pressed(ord('W'))) input_count++;
if (keyboard_check_pressed(ord('A'))) input_count++;
if (keyboard_check_pressed(ord('S'))) input_count++;
if (keyboard_check_pressed(ord('D'))) input_count++;

if (keyboard_check_released(vk_up)) input_count++;
if (keyboard_check_released(vk_down)) input_count++;
if (keyboard_check_released(vk_left)) input_count++;
if (keyboard_check_released(vk_right)) input_count++;
if (keyboard_check_released(ord('W'))) input_count++;
if (keyboard_check_released(ord('A'))) input_count++;
if (keyboard_check_released(ord('S'))) input_count++;
if (keyboard_check_released(ord('D'))) input_count++;

if (device_mouse_check_button_pressed(0, mb_left)) input_count++;

if (input_count &gt; 0)
{
    input_id++;
    input_steps = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send Keys (if pressed)

if (input_count &gt; 0)
{
    buffer_seek(command_buffer, buffer_seek_start, 0);
    buffer_write(command_buffer, buffer_u8, CMD_INPUT);
    buffer_write(command_buffer, buffer_u16, input_id);
    buffer_write(command_buffer, buffer_u8, input_count);

    // PRESSED KEYS
    if (keyboard_check_pressed(vk_left) || keyboard_check_pressed(ord('A')))
    {
        buffer_write(command_buffer, buffer_s16, vk_left);
        buffer_write(command_buffer, buffer_bool, true);
    }
    if (keyboard_check_pressed(vk_right) || keyboard_check_pressed(ord('D')))
    {
        buffer_write(command_buffer, buffer_s16, vk_right);
        buffer_write(command_buffer, buffer_bool, true);
    }
    if (keyboard_check_pressed(vk_up) || keyboard_check_pressed(ord('W')))
    {
        buffer_write(command_buffer, buffer_s16, vk_up);
        buffer_write(command_buffer, buffer_bool, true);
    }
    if (keyboard_check_pressed(vk_down) || keyboard_check_pressed(ord('S')))
    {
        buffer_write(command_buffer, buffer_s16, vk_down);
        buffer_write(command_buffer, buffer_bool, true);
    }
    
    // RELEASED KEYS
    if (keyboard_check_released(vk_left) || keyboard_check_released(ord('A')))
    {
        buffer_write(command_buffer, buffer_s16, vk_left);
        buffer_write(command_buffer, buffer_bool, false);
    }
    if (keyboard_check_released(vk_right) || keyboard_check_released(ord('D')))
    {
        buffer_write(command_buffer, buffer_s16, vk_right);
        buffer_write(command_buffer, buffer_bool, false);
    }
    if (keyboard_check_released(vk_up) || keyboard_check_released(ord('W')))
    {
        buffer_write(command_buffer, buffer_s16, vk_up);
        buffer_write(command_buffer, buffer_bool, false);
    }
    if (keyboard_check_released(vk_down) || keyboard_check_released(ord('S')))
    {
        buffer_write(command_buffer, buffer_s16, vk_down);
        buffer_write(command_buffer, buffer_bool, false);
    }
    
    if (device_mouse_check_button_pressed(0, mb_left))
    {
        buffer_write(command_buffer, buffer_s16, mb_left);
        buffer_write(command_buffer, buffer_bool, true);
        buffer_write(command_buffer, buffer_s16, mouse_x);
        buffer_write(command_buffer, buffer_s16, mouse_y);
    }
    
    var buffer_size = buffer_tell(command_buffer)
    network_send_packet(client, command_buffer, buffer_size);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Add Instances

for (var i = 0; i &lt; entities; i++)
{
    var incoming_list = ds_list_find_value(update_data, i);
    var server_type = ds_list_find_value(incoming_list, 0);
    var server_id = ds_list_find_value(incoming_list, 1);
    var server_x = ds_list_find_value(incoming_list, 2);
    var server_y = ds_list_find_value(incoming_list, 3);
    var server_angle = ds_list_find_value(incoming_list, 4);
    var server_color = ds_list_find_value(incoming_list, 5);
    var server_number = ds_list_find_value(incoming_list, 6);

    // Search for Entity
    var entity = -1;
    for (var j = 0; j &lt; ds_list_size(entity_list); j++)
    {
        entity = ds_list_find_value(entity_list, j);
        if (entity.server_id == server_id)
            break;
        entity = -1;
    }        
    // If Entity not found, Add Entity
    if (entity &lt; 0)
    {
        entity = instance_create(server_x, server_y, server_type);
        entity.server_id = server_id;
        entity.number = server_number
        entity.image_angle = server_angle;
        entity.image_blend = server_color;
        ds_list_add(entity_list, entity);
        
        if (server_type == obj_bullet)
        {
            entity.target_x = ds_list_find_value(incoming_list, 7);
            entity.target_y = ds_list_find_value(incoming_list, 8);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Remove Instances

// Get Everything that was in incoming packet
ds_list_clear(sync_list);
for (var i = 0; i &lt; entities; i++)
{
    var incoming_list = ds_list_find_value(update_data, i);
    var server_id = ds_list_find_value(incoming_list, 1);

    // Search for Entity
    var entity = -1;
    for (var j = 0; j &lt; ds_list_size(entity_list); j++)
    {
        entity = ds_list_find_value(entity_list, j);
        if (entity.server_id == server_id)
            break;
        entity = -1;
    }        
    ds_list_add(sync_list, entity);
}

// Remove Entities
for (var i = 0; i &lt; ds_list_size(entity_list); i++)
{
    var entity = ds_list_find_value(entity_list, i);

    // If Entity was not updated, destroy it
    if (ds_list_find_index(sync_list, entity) == -1)
    {
        ds_list_delete(entity_list, i);
        with (entity) instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Instances

for (var i = 0; i &lt; entities; i++)
{
    var incoming_list = ds_list_find_value(update_data, i);
    var server_type = ds_list_find_value(incoming_list, 0);
    var server_id = ds_list_find_value(incoming_list, 1);
    var server_x = ds_list_find_value(incoming_list, 2);
    var server_y = ds_list_find_value(incoming_list, 3);
    var server_image_angle = ds_list_find_value(incoming_list, 4);
    var server_image_blend = ds_list_find_value(incoming_list, 5);

    // Search for Entity
    var entity = -1;
    for (var j = 0; j &lt; ds_list_size(entity_list); j++)
    {
        entity = ds_list_find_value(entity_list, j);
        if (entity.server_id == server_id)
            break;
        entity = -1;
    }
    

    if (entity.object_index == obj_bullet) { } // No Update
    else if (entity.number == player_number &amp;&amp; is_input_predicted) { }
    else
    {
        // Update entity
        entity.x = server_x;
        entity.y = server_y;
        entity.image_angle = server_image_angle;
        entity.image_blend = server_image_blend;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input Prediction - Move Entity

if (input_count &gt; 0)
{
    for (var i = 0; i &lt; ds_list_size(entity_list); i++)
    {
        var entity = ds_list_find_value(entity_list, i);
        if (entity.object_index == obj_player &amp;&amp; entity.number == player_number)
        {
            if (is_input_predicted)
            {
                // PRESSED KEYS
                if (keyboard_check_pressed(vk_left) || keyboard_check_pressed(ord('A')))
                    entity.key_left = true;
                if (keyboard_check_pressed(vk_right) || keyboard_check_pressed(ord('D')))
                    entity.key_right = true;
                if (keyboard_check_pressed(vk_up) || keyboard_check_pressed(ord('W')))
                    entity.key_up = true;
                if (keyboard_check_pressed(vk_down) || keyboard_check_pressed(ord('S')))
                    entity.key_down = true;
                
                // RELEASED KEYS
                if (keyboard_check_released(vk_left) || keyboard_check_released(ord('A')))
                    entity.key_left = false;
                if (keyboard_check_released(vk_right) || keyboard_check_released(ord('D')))
                    entity.key_right = false;
                if (keyboard_check_released(vk_up) || keyboard_check_released(ord('W')))
                    entity.key_up = false;
                if (keyboard_check_released(vk_down) || keyboard_check_released(ord('S')))
                    entity.key_down = false;
            }
            else
            {
                entity.key_left = false;
                entity.key_right = false;
                entity.key_up = false;
                entity.key_down = false;
            }
        }   
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input Prediction - Store Value

if (is_input_predicted)
{
    var prediction = ds_list_create();
    ds_list_add(prediction, input_id);
    ds_list_add(prediction, input_steps);
    
    for (var i = 0; i &lt; ds_list_size(entity_list); i++)
    {
        var entity = ds_list_find_value(entity_list, i);
        if (entity.object_index == obj_player &amp;&amp; entity.number == player_number)
        {
            var entity_values = ds_list_create();
            ds_list_add(entity_values, entity.object_index);
            ds_list_add(entity_values, entity.server_id);
            ds_list_add(entity_values, entity.x);
            ds_list_add(entity_values, entity.y);
            ds_list_add(entity_values, entity.image_angle);
            ds_list_add(entity_values, entity.image_blend);
            ds_list_add(entity_values, entity.number);
            ds_list_add(entity_values, 0);
            ds_list_add(prediction, entity_values);
        }   
    }
    
    ds_list_add(predict_history, prediction);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Entity Interpolation

if (is_entity_interpolation &amp;&amp; ds_list_size(packet_history) &gt; 0)
{
    var render_time = current_time - client_interpolation;

    // Past_packet is the packet before Render time. Head is the packet after or on Render time.
    var head = ds_list_find_value(packet_history, 0);
    while (ds_list_size(packet_history) &gt; 0 &amp;&amp; ds_list_find_value(head, 0) &lt; render_time)
    {
        // Destroy all sublist in past-packets and the list itself
        for (var i = 1; i &lt; ds_list_size(past_packet); i++)
            ds_list_destroy(ds_list_find_value(past_packet, i));
        ds_list_destroy(past_packet);
        
        // Update past_packet and head(packet)
        past_packet = ds_list_find_value(packet_history, 0);
        ds_list_delete(packet_history, 0);
        head = ds_list_find_value(packet_history, 0);
    }

    var past_time = ds_list_find_value(past_packet, 0);
    var head_time = ds_list_find_value(head, 0);

    // Calculate Entity Variable Values between past_time and head_time
    if (past_time &gt; 0 &amp;&amp; ds_exists(head, ds_type_list) &amp;&amp; head_time != past_time)
    {
        // Calculate point of time between both times
        var t1 = render_time - past_time;
        var t2 = head_time - past_time;
        var diff = t1 / t2;
        
        // Compute difference of variables between past_time and head_time
        for (i = 0; i &lt; ds_list_size(entity_list); i++)
        {
            var entity = ds_list_find_value(entity_list, i);
            
            // Does Entity exist in past packet?
            var past_entity = -1;
            for (var j = 1; j &lt; ds_list_size(past_packet); j++)
            {
                past_entity = ds_list_find_value(past_packet, j);
                if (ds_list_find_value(past_entity, 1) == entity.server_id)
                    break;
                past_entity = -1
            }
            
            // Does Entity exist in head packet?
            var head_entity = -1;
            for (var j = 1; j &lt; ds_list_size(head); j++)
            {
                head_entity = ds_list_find_value(head, j);
                if (ds_exists(head_entity, ds_type_list))
                    if (ds_list_find_value(head_entity, 1) == entity.server_id)
                        break;
                head_entity = -1;
            }
           
            // If entity found in both packets
            if (past_entity &gt;= 0 &amp;&amp; head_entity &gt;= 0)
            {
                var _x1 = ds_list_find_value(past_entity, 2);
                var _x2 = ds_list_find_value(head_entity, 2);
                var _y1 = ds_list_find_value(past_entity, 3);
                var _y2 = ds_list_find_value(head_entity, 3);
                _x1 += (_x2 - _x1) * diff;
                _y1 += (_y2 - _y1) * diff;
                entity.x = _x1;
                entity.y = _y1;
            }
        }
    }
}
else if (!is_entity_interpolation)
{
    for (var i = 0; i &lt; ds_list_size(packet_history); i++)
        ds_list_destroy(ds_list_find_value(packet_history, i));

    ds_list_clear(packet_history);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Soldier Step

obj_soldier.visible = is_soldier_enabled;

for (var i = 0; i &lt; ds_list_size(entity_list); i++)
{
    var entity = ds_list_find_value(entity_list, i);
    if (entity.object_index == obj_player)
        entity.visible = !is_soldier_enabled;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Client Recieve Packet

var eventid = ds_map_find_value(async_load, "id");
var command = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receieve Update Command

if (client == eventid)
{
    var buffer = ds_map_find_value(async_load, "buffer");
    var command = buffer_read(buffer, buffer_u8);
    
    // Offset by one more if you are not a local client
    if (!instance_exists(obj_server))
        command = buffer_read(buffer, buffer_u8);
    
    if (command == CMD_UPDATE)
    {
        update_rate = current_time - last_update;
        last_update = current_time;
        tick_update = current_time;
        
        // Read Header Information
        player_number = buffer_read(buffer, buffer_u8);
        server_tick = buffer_read(buffer, buffer_u32);
        update_input_id = buffer_read(buffer, buffer_u16);
        update_input_steps = buffer_read(buffer, buffer_u16);
        entities = buffer_read(buffer, buffer_u32);

        // Destroy lists in list
        ds_list_clear(update_data);
        
        // Add data into
        for (var i = 0; i &lt; entities; i++)
        {
            // Read Entity Data
            var update_entity = ds_list_create();
            ds_list_add(update_entity, buffer_read(buffer, buffer_u32)); // object_index
            ds_list_add(update_entity, buffer_read(buffer, buffer_u32)); // id
            ds_list_add(update_entity, buffer_read(buffer, buffer_u16)); // x
            ds_list_add(update_entity, buffer_read(buffer, buffer_u16)); // y
            ds_list_add(update_entity, buffer_read(buffer, buffer_u16)); // image_angle
            ds_list_add(update_entity, buffer_read(buffer, buffer_u32)); // image_blend
            ds_list_add(update_entity, buffer_read(buffer, buffer_u8)); // player_number
            
            // Read Custom Entity Data (if any)
            var custom_variables = buffer_read(buffer, buffer_u8);
            for (var j = 0; j &lt; custom_variables; j++)
                ds_list_add(update_entity, buffer_read(buffer, buffer_u32)); // custom
            
            // Add data to update_data
            ds_list_add(update_data, update_entity);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive Chat Command

if (client == eventid &amp;&amp; command == CMD_CHAT)
{
    chat_from = buffer_read(buffer, buffer_u8);
    chat_text = buffer_read(buffer, buffer_string);
    
    scr_log("[" + string(chat_from) + "] " + string(chat_text));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive Latency Command

if (client == eventid &amp;&amp; command == CMD_LATENCY)
{
    sent_time = buffer_read(buffer, buffer_u32);
    latency = current_time - sent_time;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input Prediction - Check Predictions

if (is_input_predicted &amp;&amp; client == eventid &amp;&amp; command == CMD_UPDATE)
{
    // Remove all items before update_input_id
    var head = ds_list_find_value(predict_history, 0);
    while (ds_list_size(predict_history) &gt; 0
    &amp;&amp; ds_list_find_value(head, 0) &lt; update_input_id)
    {
        ds_list_delete(predict_history, 0);
        head = ds_list_find_value(predict_history, 0);
    }
    // Remove all items before update_input_steps
    while (ds_list_size(predict_history) &gt; 0
    &amp;&amp; ds_list_find_value(head, 1) &lt; update_input_steps)
    {
        ds_list_delete(predict_history, 0);
        head = ds_list_find_value(predict_history, 0);
    }
    if (!ds_exists(head, ds_type_list)) exit;
    
    // Get entity data
    var predicted = -1;
    for (var i = 2; i &lt; ds_list_size(head); i++)
    {
        predicted = ds_list_find_value(head, i);
        if (ds_exists(predicted, ds_type_list))
            if (ds_list_find_value(predicted, 0) == obj_player
            &amp;&amp; ds_list_find_value(predicted, 6) == player_number)
                break;
        predicted = -1;
    }
    if (predicted &lt; 0) exit;
    
    // Get updated data
    var updated = -1;
    for (var i = 0; i &lt; ds_list_size(update_data); i++)
    {
        updated = ds_list_find_value(update_data, i);
        if (ds_list_find_value(updated, 0) == obj_player
        &amp;&amp; ds_list_find_value(updated, 6) == player_number)
            break;
        updated = -1;
    }
    if (updated &lt; 0) exit;
    
    var entity = -1;
    for (var i = 0; i &lt; ds_list_size(entity_list); i++)
    {
        entity = ds_list_find_value(entity_list, i);
        if (ds_list_find_value(predicted, 1) == entity.server_id)
            break;
        entity = -1;
    }
    // Compare predicted to update
    for (var i = 2; i &lt; 4; i++)
    {
        var updated_value = ds_list_find_value(updated, i);
        var predicted_value = ds_list_find_value(predicted, i);
        var predicted_id = ds_list_find_value(predicted, 1);
        var delta = updated_value - predicted_value;
        
        if (abs(delta) &gt; 2)
        {
            scr_log("Pred Error u" + string(updated_value) + " p" + string(predicted_value));
            
            // Fix all Predicted Values
            for (var j = 0; j &lt; ds_list_size(predict_history); j++)
            {
                var fix_list = ds_list_find_value(predict_history, j);
                for (var k = 2; k &lt; ds_list_size(fix_list); k++)
                {
                    var fix_predicted = ds_list_find_value(fix_list, k);
                    if (ds_list_find_value(fix_predicted, 1) == predicted_id)
                    {
                        var new_value = ds_list_find_value(fix_predicted, i);
                        new_value += delta;
                        ds_list_replace(fix_predicted, i, new_value);
                        continue;
                    }
                }
            }
            
            if (entity &gt; 0)
            {
                if (i == 2) entity.x += delta;
                if (i == 3) entity.y += delta;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Entity Interpolation

if (is_entity_interpolation &amp;&amp; client == eventid &amp;&amp; command == CMD_UPDATE)
{ 
    var interpol_list = ds_list_create();
    ds_list_add(interpol_list, current_time);
    
    for (var i = 0; i &lt; ds_list_size(update_data); i++)
    {
        var entity_data = ds_list_find_value(update_data, i);
        
        // Do not copy to interpolation list under these conditions
        if (ds_list_find_value(entity_data, 0) == obj_bullet)
            continue;
        if (ds_list_find_value(entity_data, 6) == player_number)
            continue;
        
        // Copy Entity Data to Interpolation List
        if (ds_list_size(entity_data) &gt; 2)
        {
            var copy_entity = ds_list_create();
            ds_list_copy(copy_entity, entity_data);
            ds_list_add(interpol_list, copy_entity);
        }
    }

    ds_list_add(packet_history, interpol_list);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send Chat Message

if (string_length(chat_text) &gt; 0)
{
    buffer_seek(command_buffer, buffer_seek_start, 0);
    buffer_write(command_buffer, buffer_u8, CMD_CHAT);
    buffer_write(command_buffer, buffer_string, chat_text);
    var buffer_size = buffer_tell(command_buffer)
    network_send_packet(client, command_buffer, buffer_size);
    chat_text = "";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Connect Client

scr_log ("Connecting Client...");

var err = network_connect(client, ip, PORT);
if (err &lt; 0)
{
    scr_log("Unable to connect to server");
    instance_destroy();
}
else
{
    scr_log("Client Connected");
    room_goto(rm_game);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw all sprites

var index = 0;
var str = "";

str += "Server Tick: " + string(server_tick);
str += "#Input ID: " + string(input_id);
str += "#Update Rate: " + string(update_rate);
str += "#Update Input ID: " + string(update_input_id);
str += "#Update Input Steps: " + string(update_input_steps);
str += "#Player Num: " + string(player_number);
str += "#Latency: " + string(latency);
str += "#Entities: " + string(entities);
str += "#-------------------------"
for (var i = 0; i &lt; ds_list_size(update_data); i++)
{
    var entity = ds_list_find_value(update_data, i);
    var si = string(i);
    str += "#Entity[" + si + "].object: " + object_get_name(ds_list_find_value(entity, 0));
    str += "#Entity[" + si + "].id: " + string(ds_list_find_value(entity, 1));
    str += "#Entity[" + si + "].number: " + string(ds_list_find_value(entity, 6));
    str += "#Entity[" + si + "].x: " + string(ds_list_find_value(entity, 2));
    str += "#Entity[" + si + "].y: " + string(ds_list_find_value(entity, 3));
    str += "#Entity[" + si + "].image_angle: " + string(ds_list_find_value(entity, 4));
    str += "#Entity[" + si + "].image_color: " + string(ds_list_find_value(entity, 5));

    for (var j = 7; j &lt; ds_list_size(entity); j++)
    {
        var sj = string(j - 6);
        str += "#Entity[" + si + "].custom" + sj + ": " + string(ds_list_find_value(entity, j));
    }
    str += "#-------------------------"
}

draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_text(0, 0, str);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Toggle Shooting Mode

/*
shooting_mode = !shooting_mode;

if (shooting_mode)
    scr_log("Shooting Mode is ON");
else
    scr_log("Shooting Mode is OFF");
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
