<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Client

scr_log("Creating Client...")

ip = "127.0.0.1";
client = network_create_socket(network_socket_tcp);

player_number = -1;
entities = 0;
entity_list = ds_list_create();
update_data = ds_list_create();
sync_list = ds_list_create();

command_buffer = buffer_create(256, buffer_grow, 1);
last_update = 0;
update_rate = 0;

latency = 0;
latency_interval = ceil(1000 / room_speed);
alarm[0] = latency_interval;

shooting_mode = false;

scr_log("Client Created")
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Entity Interpolation

is_entity_interpolation = false;
client_interpolation = 200;
packet_history = ds_queue_create();
past_packet = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input Prediction

is_input_predicted = false;
cmd_id = 0;
predict_history = ds_queue_create();

DOWN = 0;
LEFT = 1;
RIGHT = 2;
UP = 3;

move_speed = 2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Soldier Sprite

is_soldier_enabled = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy Client

network_destroy(client);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send Latency Command

buffer_seek(command_buffer, buffer_seek_start, 0);
buffer_write(command_buffer, buffer_u8, CMD_LATENCY);
buffer_write(command_buffer, buffer_u32, current_time);
var buffer_size = buffer_tell(command_buffer)
network_send_packet(client, command_buffer, buffer_size);
alarm[0] = latency_interval;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// How many keys are pressed?

var key_count = 0;

if (keyboard_check(vk_up) || keyboard_check(ord('W'))) key_count++;
if (keyboard_check(vk_left) || keyboard_check(ord('A'))) key_count++;
if (keyboard_check(vk_down) || keyboard_check(ord('S'))) key_count++;
if (keyboard_check(vk_right) || keyboard_check(ord('D'))) key_count++;

if (key_count &gt; 0)
    cmd_id++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input Prediction

if (key_count &gt; 0 &amp;&amp; is_input_predicted)
{
    // Get Client Player Instance
    var player = -1;
    for (var i = 0; i &lt; instance_number(obj_client_player); i++)
    {
        var player = instance_find(obj_client_player, i);
        if (player.number == player_number) break;
        else player = -1;
    }
    
    if (player &gt;= 0)
    {
        // Update player to most recent prediction
        if (ds_queue_size(predict_history) &gt; 0)
        {
            var recent_list = ds_queue_tail(predict_history);
            player.x = ds_list_find_value(recent_list, 1);
            player.y = ds_list_find_value(recent_list, 2);
        }
        
        // Update Player
        if (keyboard_check(vk_left) || keyboard_check(ord('A')))
            player.x -= move_speed;
        if (keyboard_check(vk_right) || keyboard_check(ord('D')))
            player.x += move_speed;
        if (keyboard_check(vk_up) || keyboard_check(ord('W')))
            player.y -= move_speed;
        if (keyboard_check(vk_down) || keyboard_check(ord('S')))
            player.y += move_speed;
        
        // Queue Prediction
        var prediction = ds_list_create();
        ds_list_add(prediction, cmd_id);
        ds_list_add(prediction, player.x);
        ds_list_add(prediction, player.y);
        ds_queue_enqueue(predict_history, prediction);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Entity Interpolation

if (is_entity_interpolation &amp;&amp; ds_queue_size(packet_history) &gt; 0)
{
    var render_time = current_time - client_interpolation;

    // Past_packet is the packet before Render time. Head is the packet after or on Render time.
    var head = ds_queue_head(packet_history);
    while (ds_queue_size(packet_history) &gt; 0 &amp;&amp; ds_list_find_value(head, 0) &lt; render_time)
    {
        past_packet = ds_queue_dequeue(packet_history);
        head = ds_queue_head(packet_history);
    }

    var past_time = ds_list_find_value(past_packet, 0);
    var head_time = ds_list_find_value(head, 0);

    // Calculate Entity Variable Values between past_time and head_time
    if (past_time &gt; 0 &amp;&amp; head_time != past_time)
    {
        // Calculate point of time between both times
        //scr_log("Interop r: " + string(render_time) + " 1: " + string(before_time) + " 2: " + string(after_time));
        var t1 = render_time - past_time;
        var t2 = head_time - past_time;
        var diff = t1 / t2;
        
        // Compute difference of variables between past_time and head_time
        for (i = 0; i &lt; ds_list_size(entity_list); i++)
        {
            var entity = ds_list_find_value(entity_list, i);
            
            if (entity.object_index == obj_client_player &amp;&amp; player_number == entity.number)
                continue;
            
            //scr_log("Entity Interop started... id" + string(entity.entity_id));
            
            // Does Entity exist in past packet?
            var offset1 = -1;
            var j = 1;
            while (j &lt; ds_list_size(past_packet))
            {
                //scr_log("Entity Interop past_packet... id" + string(ds_list_find_value(past_packet, j + 1)));
                if (ds_list_find_value(past_packet, j) == TYPE_PLAYER)
                {
                    if (ds_list_find_value(past_packet, j + 1) == entity.entity_id)
                    {
                        offset1 = j;
                        break;
                    }
                    j = j + VAR_COUNT_PLAYER;
                }
                else if (ds_list_find_value(past_packet, j) == TYPE_BULLET)
                {
                    if (ds_list_find_value(past_packet, j + 1) == entity.entity_id)
                    {
                        offset1 = j;
                        break;
                    }
                    j = j + VAR_COUNT_BULLET;
                }
                else
                    break;
            }
            
            // Does Entity exist in head packet?
            var offset2 = -1;
            var j = 1;
            while (j &lt; ds_list_size(head))
            {
                if (ds_list_find_value(head, j) == TYPE_PLAYER)
                {
                    if (ds_list_find_value(head, j + 1) == entity.entity_id)
                    {
                        offset2 = j;
                        break;
                    }
                    j = j + VAR_COUNT_PLAYER;
                }
                else if (ds_list_find_value(head, j) == TYPE_BULLET)
                {
                    if (ds_list_find_value(head, j + 1) == entity.entity_id)
                    {
                        offset2 = j;
                        break;
                    }
                    j = j + VAR_COUNT_BULLET;
                }
                else
                    break;
            }
           
            // If entity found in both packets
            if (offset1 &gt;= 0 &amp;&amp; offset2 &gt;= 0)
            {
                if (entity.object_index == obj_client_player)
                {
                    var _x1 = ds_list_find_value(past_packet, offset1 + 3);
                    var _x2 = ds_list_find_value(head, offset2 + 3);
                    var _y1 = ds_list_find_value(past_packet, offset1 + 4);
                    var _y2 = ds_list_find_value(head, offset2 + 4);
                    _x1 += (_x2 - _x1) * diff;
                    _y1 += (_y2 - _y1) * diff;
                    entity.x = _x1;
                    entity.y = _y1;                    
                }
                else if (entity.object_index == obj_client_bullet)
                {
                    var _x1 = ds_list_find_value(past_packet, offset1 + 2);
                    var _x2 = ds_list_find_value(head, offset2 + 2);
                    var _y1 = ds_list_find_value(past_packet, offset1 + 3);
                    var _y2 = ds_list_find_value(head, offset2 + 3);
                    _x1 += (_x2 - _x1) * diff;
                    _y1 += (_y2 - _y1) * diff;
                    entity.x = _x1;
                    entity.y = _y1;
                    entity.visible = true;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Soldier Step

if (is_soldier_enabled)
{
    obj_soldier.visible = true;
    obj_client_player.visible = false;
}
else
{
    obj_soldier.visible = false;
    obj_client_player.visible = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send Keys (if pressed)

if (key_count &gt; 0)
{
    buffer_seek(command_buffer, buffer_seek_start, 0);
    buffer_write(command_buffer, buffer_u8, CMD_KEYBOARD);
    buffer_write(command_buffer, buffer_u32, cmd_id);
    buffer_write(command_buffer, buffer_u8, key_count);

    if (keyboard_check(vk_left) || keyboard_check(ord('A')))
        buffer_write(command_buffer, buffer_s16, vk_left);
    if (keyboard_check(vk_right) || keyboard_check(ord('D')))
        buffer_write(command_buffer, buffer_s16, vk_right);
    if (keyboard_check(vk_up) || keyboard_check(ord('W')))
        buffer_write(command_buffer, buffer_s16, vk_up);
    if (keyboard_check(vk_down) || keyboard_check(ord('S')))
        buffer_write(command_buffer, buffer_s16, vk_down);
    
    var buffer_size = buffer_tell(command_buffer)
    network_send_packet(client, command_buffer, buffer_size);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send Mouse Press

if (mouse_check_button_pressed(mb_left) &amp;&amp; shooting_mode)
{
    buffer_seek(command_buffer, buffer_seek_start, 0);
    buffer_write(command_buffer, buffer_u8, CMD_MOUSE);
    buffer_write(command_buffer, buffer_s16, mouse_x);
    buffer_write(command_buffer, buffer_s16, mouse_y);
    
    var buffer_size = buffer_tell(command_buffer)
    network_send_packet(client, command_buffer, buffer_size);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Client Recieve Packet

var eventid = ds_map_find_value(async_load, "id");
var command = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receieve Update Command

if (client == eventid)
{
    var buffer = ds_map_find_value(async_load, "buffer");
    var command = buffer_read(buffer, buffer_u8);
    
    // Offset by one more if you are not a local client
    if (!instance_exists(obj_server))
        command = buffer_read(buffer, buffer_u8);
    
    if (command == CMD_UPDATE)
    {
        update_rate = current_time - last_update;
        last_update = current_time;
        
        entities = buffer_read(buffer, buffer_u16);
        player_number = buffer_read(buffer, buffer_u8);
        var last_cmd_id = buffer_read(buffer, buffer_u32);

        ds_list_clear(update_data);
        
        for (var i = 0; i &lt; entities; i++)
        {
            var type = buffer_read(buffer, buffer_u8);
            ds_list_add(update_data, type);
            ds_list_add(update_data, buffer_read(buffer, buffer_u32)); // entity id
            
            if (type == TYPE_PLAYER)
            {
                ds_list_add(update_data, buffer_read(buffer, buffer_u8)); // player_number
                ds_list_add(update_data, buffer_read(buffer, buffer_u16)); // x
                ds_list_add(update_data, buffer_read(buffer, buffer_u16)); // y
                ds_list_add(update_data, buffer_read(buffer, buffer_u32)); // image_blend
            }
            else if (type == TYPE_BULLET)
            {
                ds_list_add(update_data, buffer_read(buffer, buffer_u16)); // x
                ds_list_add(update_data, buffer_read(buffer, buffer_u16)); // y
                ds_list_add(update_data, buffer_read(buffer, buffer_u16)); // image_angle
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive Chat Command

if (client == eventid &amp;&amp; command == CMD_CHAT)
{
    chat_from = buffer_read(buffer, buffer_u8);
    chat_text = buffer_read(buffer, buffer_string);
    
    scr_log("[" + string(chat_from) + "] " + string(chat_text));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive Latency Command

if (client == eventid &amp;&amp; command == CMD_LATENCY)
{
    sent_time = buffer_read(buffer, buffer_u32);
    latency = current_time - sent_time;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input Prediction

if (is_input_predicted &amp;&amp; client == eventid &amp;&amp; command == CMD_UPDATE)
{
    // Get Client Player Instance Offset in Update List
    var offset = 0;
    var i = 0;
    while (i &lt; ds_list_size(update_data))
    {
        offset = i;
        if (ds_list_find_value(update_data, i) == TYPE_PLAYER)
        {
            if (player_number == ds_list_find_value(update_data, i + 2))
                break;
            i = i + VAR_COUNT_PLAYER;
        }
        else if (ds_list_find_value(update_data, i) == TYPE_BULLET)
            i = i + VAR_COUNT_BULLET;
        else
            break;
    }
        
    // Compare with Prediction
    if (ds_queue_size(predict_history) &gt; 0 &amp;&amp; last_cmd_id &gt; 0)
    {
        // Clear queue until prediction time (or clear completely)
        var list = ds_queue_head(predict_history)
        while (ds_queue_size(predict_history) &gt; 0 &amp;&amp; ds_list_find_value(list, 0) &lt; last_cmd_id)
            list = ds_queue_dequeue(predict_history);
        
        // Run following if we find exact prediction
        if (ds_list_find_value(list, 0) == last_cmd_id)
        {            
            // Get Variables of Client Player we need to verify predictions
            var incoming = 0;
            incoming[0] = ds_list_find_value(update_data, offset + 3);
            incoming[1] = ds_list_find_value(update_data, offset + 4);
            var incoming_size = array_length_1d(incoming);
            
            // Check Prediction vs Received
            for (var i = 0; i &lt; incoming_size; i++)
            {
                received = incoming[i];
                predicted = ds_list_find_value(list, i + 1);
                
                // Prediction Error
                if (received != predicted)
                {
                    scr_log("Prediction Error c" + string(last_cmd_id) + " r" + string(received) + " p" + string(predicted));
                        
                    // Adjust error for current and future predictions
                    if (ds_queue_size(predict_history) &gt; 0)
                    {
                        var delta_value = received - predicted;
                        
                        // Fix future predictions
                        for (var j = 0; j &lt; ds_queue_size(predict_history); j++)
                        {
                            var new_list = ds_queue_dequeue(predict_history);
                            var new_value = ds_list_find_value(new_list, i + 1) + delta_value;
                            ds_list_replace(new_list, i + 1, new_value);
                            ds_queue_enqueue(predict_history, new_list);
                        }
                    }
                }
            }
        }
    }
    
    // Update Client Player Data to newest (sometimes adjusted) prediction
    if (ds_queue_size(predict_history) &gt; 0)
    {
        var recent_list = ds_queue_tail(predict_history);
        ds_list_replace(update_data, offset + 3 ,ds_list_find_value(recent_list, 1)); // x
        ds_list_replace(update_data, offset + 4 ,ds_list_find_value(recent_list, 2)); // y
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Entity Interpolation

if (is_entity_interpolation &amp;&amp; client == eventid &amp;&amp; command == CMD_UPDATE)
{ 
    var current_sprites = ds_list_create();
    ds_list_copy(current_sprites, update_data);
    ds_list_insert(current_sprites, 0, current_time);
    ds_queue_enqueue(packet_history, current_sprites);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update/Add/Remove Player Instances

if (client == eventid &amp;&amp; command == CMD_UPDATE)
{
    ds_list_clear(sync_list);
    
    var entity;
    var i = 0;
    while (i &lt; ds_list_size(update_data))
    {
        var type = ds_list_find_value(update_data, i);
        var entity_id = ds_list_find_value(update_data, i + 1);

        // Search for Entity
        var found_entity = false;
        for (var j = 0; j &lt; ds_list_size(entity_list); j++)
        {
            entity = ds_list_find_value(entity_list, j);
            if (entity.entity_id == entity_id)
            {
                found_entity = true;
                break;
            }
        }
        
        // If Entity not found, Add Entity
        if (!found_entity)
        {
            if (type == TYPE_PLAYER)
            {
                entity = instance_create(0, 0, obj_client_player);
                entity.entity_id = entity_id;
                entity.number = ds_list_find_value(update_data, i + 2);
                ds_list_add(entity_list, entity);
            }
            else if (type == TYPE_BULLET)
            {
                entity = instance_create(0, 0, obj_client_bullet);
                entity.entity_id = entity_id;
                ds_list_add(entity_list, entity);
                
                // Show after interpolation started
                if (is_entity_interpolation)
                    entity.visible = false;
            }
        }
        
        // Update entity
        if (type == TYPE_PLAYER)
        {
            entity.x = ds_list_find_value(update_data, i + 3);
            entity.y = ds_list_find_value(update_data, i + 4);
            entity.image_blend = ds_list_find_value(update_data, i + 5);
            i = i + VAR_COUNT_PLAYER;
        }
        else if (type == TYPE_BULLET)
        {
            entity.x = ds_list_find_value(update_data, i + 2);
            entity.y = ds_list_find_value(update_data, i + 3);
            entity.image_angle = ds_list_find_value(update_data, i + 4);
            i = i + VAR_COUNT_BULLET;
        }
        else
            break;
        
        ds_list_add(sync_list, entity.entity_id);
    }
    
    // Remove Entities
    for (var i = 0; i &lt; ds_list_size(entity_list); i++)
    {
        var entity = ds_list_find_value(entity_list, i);
        
        // Search for Entity
        var found_entity = false;
        for (var j = 0; j &lt; ds_list_size(sync_list); j++)
        {
            if (entity.entity_id == ds_list_find_value(sync_list, j))
            {
                found_entity = true;
                break;
            }
        }

        // If Entity was not updated, destroy it
        if (!found_entity)
        {
            var index = ds_list_find_index(entity_list, entity);
            ds_list_delete(entity_list, index);
            with (entity) instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send Chat Message

if (string_length(chat_text) &gt; 0)
{
    buffer_seek(command_buffer, buffer_seek_start, 0);
    buffer_write(command_buffer, buffer_u8, CMD_CHAT);
    buffer_write(command_buffer, buffer_string, chat_text);
    var buffer_size = buffer_tell(command_buffer)
    network_send_packet(client, command_buffer, buffer_size);
    chat_text = "";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Connect Client

scr_log ("Connecting Client...");

var err = network_connect(client, ip, PORT);
if (err &lt; 0)
{
    scr_log("Unable to connect to server");
    instance_destroy();
}
else
{
    scr_log("Client Connected");
    room_goto(rm_game);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw all sprites

var index = 0;
var str = "";
str += "Player Num: " + string(player_number);
str += "#Players: " + string(entities);

for (var i = 0; i &lt; instance_number(obj_client_player); i++)
{
    var _x, _y, _blend, instance;
    var player = instance_find(obj_client_player, i);
    _x = player.x;
    _y = player.y;
    _blend = player.image_blend;

    str += "#Player[" + string(player.number) + "].x: " + string(_x);
    str += "#Player[" + string(player.number) + "].y: " + string(_y);
    str += "#Player[" + string(player.number) + "].color: " + string(_blend);

    draw_set_color(c_white);
    if (player.number == player_number) draw_set_color(c_navy);
    draw_set_valign(fa_top);    
    draw_set_halign(fa_center);
    draw_text(_x + 8, _y - 20, "Player " + string(player.number));
}

draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
str += "#Latency: " + string(latency);
str += "#Update Rate: " + string(update_rate);
str += "#Interpolation: " + string(client_interpolation);
draw_text(0, 0, str);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Toggle Shooting Mode

shooting_mode = !shooting_mode;

if (shooting_mode)
    scr_log("Shooting Mode is ON");
else
    scr_log("Shooting Mode is OFF");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
