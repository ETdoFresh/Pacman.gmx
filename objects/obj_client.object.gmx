<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initiate Client

ip = "127.0.0.1";
server_port = 6515;
client_port = 6516;

all_sprites = ds_list_create();
sprites = 0;

command_buffer = buffer_create(256, buffer_grow, 1);
last_command_update = current_time;

UP = 0;
DOWN = 1;
LEFT = 2;
RIGHT = 3;

command[UP] = false;
command[DOWN] = false;
command[LEFT] = false;
command[RIGHT] = false;

predict_history = ds_queue_create();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send keyboard commands every step
/// (if anything being pressed)

if ((current_time - last_command_update) &gt; 30)
{
    last_command_update = current_time;
    
    var number_of_commands = 0;
    if (command[UP]) number_of_commands++;
    if (command[DOWN]) number_of_commands++;
    if (command[LEFT]) number_of_commands++;
    if (command[RIGHT]) number_of_commands++;
    
    if (number_of_commands &gt; 0)
    {
        buffer_seek(command_buffer, buffer_seek_start, 0);
        buffer_write(command_buffer, buffer_string, "input");
        buffer_write(command_buffer, buffer_u32, current_time);
        buffer_write(command_buffer, buffer_u8, number_of_commands);
        if (command[UP])
        {
            buffer_write(command_buffer, buffer_s16, vk_up);
            var _y = ds_list_find_value(all_sprites, 2) - 3;
            ds_list_replace(all_sprites, 2, _y);
        }
        if (command[DOWN])
        {
            buffer_write(command_buffer, buffer_s16, vk_down);
            var _y = ds_list_find_value(all_sprites, 2) + 3;
            ds_list_replace(all_sprites, 2, _y);
        }
        if (command[LEFT])
        {
            buffer_write(command_buffer, buffer_s16, vk_left);
            var _x = ds_list_find_value(all_sprites, 1) - 3;
            ds_list_replace(all_sprites, 1, _x);
        }
        if (command[RIGHT])
        {
            buffer_write(command_buffer, buffer_s16, vk_right);
            var _x = ds_list_find_value(all_sprites, 1) + 3;
            ds_list_replace(all_sprites, 1, _x);
        }
        
        var buffer_size = buffer_tell(command_buffer)
        network_send_udp(client, ip, server_port, command_buffer, buffer_size);
        
        ds_list_replace(all_sprites, 0, current_time);
        var new_prediction = ds_list_create();
        ds_list_copy(new_prediction, all_sprites);
        ds_queue_enqueue(predict_history, new_prediction);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Client Recieve Data
var eventid = ds_map_find_value(async_load, "id");
var buffer = ds_map_find_value(async_load, "buffer");
var command = string(buffer_read(buffer, buffer_string));

if (command == "update")
{
    sprites = buffer_read(buffer, buffer_u16);
    
    received_list = ds_list_create();
    ds_list_clear(received_list);
    
    var received_time = -1;
    for (var i = 0; i &lt; sprites; i++)
    {
        received_time = buffer_read(buffer, buffer_u32);
        ds_list_add(received_list, received_time);
        ds_list_add(received_list, buffer_read(buffer, buffer_u16)); // x
        ds_list_add(received_list, buffer_read(buffer, buffer_u16)); // y
        ds_list_add(received_list, buffer_read(buffer, buffer_u16)); // image_blend
    }
    
    // Compare recieved with predicted
    if (ds_queue_size(predict_history) &gt; 0 &amp;&amp; received_time &gt;= 0)
    {
        // Clear out queue until received time (or completely)
        var list = ds_queue_head(predict_history);
        while(ds_queue_size(predict_history) &gt; 0 &amp;&amp; ds_list_find_value(list, 0) &lt; received_time)
            list = ds_queue_dequeue(predict_history);
        
        if (ds_list_find_value(list, 0) == received_time)
        {
            for (var i = 0; i &lt; ds_list_size(list); i++)
            {
                received = ds_list_find_value(received_list, i);
                predicted = ds_list_find_value(list, i);
                
               if (received != predicted)
               {
                    with (instance_create(100,100,obj_popup_text))
                        text = "Prediction Error";
                    var offset = received - predicted;
                    
                    for (var j = 0; j &lt; ds_queue_size(predict_history); j++)
                    {
                        var new_list = ds_queue_dequeue(predict_history);
                        var new_value = ds_list_find_value(new_list, i) + offset;
                        ds_list_replace(new_list, i, new_value);
                        ds_queue_enqueue(predict_history, new_list);
                    }
                    
                    ds_list_copy(all_sprites, ds_queue_tail(predict_history));
                }
            }
        }
    }
    else if (received_time &gt;= 0)
    {
        ds_list_copy(all_sprites, received_list);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Connect Event

client = network_create_socket(network_socket_udp);
server = network_create_server(network_socket_udp, client_port, 2);

var connect_buffer = buffer_create(256, buffer_grow, 1);
buffer_write(connect_buffer, buffer_string, "connect");
var buffer_size = buffer_tell(connect_buffer);
network_send_udp(client, ip, server_port, connect_buffer, buffer_size);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw all sprites

var index = 0;
for (var i = 0; i &lt; sprites; i++)
{
    var _last_update, _x, _y, _blend;
    _last_update = ds_list_find_value(all_sprites, index++);
    _x = ds_list_find_value(all_sprites, index++);
    _y = ds_list_find_value(all_sprites, index++);
    _blend = ds_list_find_value(all_sprites, index++);
    
    draw_sprite_ext(spr_player, 0, _x, _y, 1, 1, 0, _blend, 1.0);
    
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    draw_text(_x + 16, _y - 20, "Player");
    
    draw_text(_x + 16, _y + 32, string(_x) + ", " + string(_y));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>command[DOWN] = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>command[RIGHT] = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>command[UP] = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>command[LEFT] = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>command[DOWN] = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>command[RIGHT] = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>command[UP] = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>command[LEFT] = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
